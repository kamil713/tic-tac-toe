"use strict";function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,r){if(e){if("string"==typeof e)return _arrayLikeToArray(e,r);var n=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(n="Object"===n&&e.constructor?e.constructor.name:n)||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,r):void 0}}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,r){(null==r||r>e.length)&&(r=e.length);for(var n=0,t=new Array(r);n<r;n++)t[n]=e[n];return t}var $cellElements,$board,$winningMessageElement,$winningMessageTextElement,$resultPlayer,$resultAIorFriend,$restartButton,circleTurn,currentMode,opponentClass,fieldX,fieldY,game=function(){prepareGameElements(),prepareGameEvents()},prepareGameElements=function(){$resultPlayer=document.querySelector(".result__player"),$resultAIorFriend=document.querySelector(".result__ai"),$cellElements=document.querySelectorAll("[data-cell]"),$board=document.getElementById("board"),$winningMessageElement=document.getElementById("winningMessage"),$winningMessageTextElement=document.querySelector("[data-wining-message-text]"),$restartButton=document.querySelectorAll(".restart")},prepareGameEvents=function(){$restartButton.forEach(function(e){e.addEventListener("click",startGame)})},CROSS_CLASS="cross",CIRCLE_CLASS="circle",WINNING_COMBINATIONS=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]],gameStatus="still running",currentBoard=[["","",""],["","",""],["","",""]],randomMode=["easy","medium","hard"],randomNumber=Math.floor(3*Math.random());function startGame(){$cellElements.forEach(function(e){e.classList.remove(CROSS_CLASS),e.classList.remove(CIRCLE_CLASS),e.removeEventListener("click",handleClick),e.addEventListener("click",handleClick,{once:!0})}),setBoardHoverClass(),$winningMessageElement.classList.remove("show"),gameStatus="still runinng",currentBoard=[["","",""],["","",""],["","",""]],currentMode=getModeClassForName($selectedDifficulty.textContent),opponentClass=circleTurn?CROSS_CLASS:CIRCLE_CLASS}function handleClick(e){var e=e.target,r=circleTurn?CIRCLE_CLASS:CROSS_CLASS,n=circleTurn?CROSS_CLASS:CIRCLE_CLASS;"still runinng"===gameStatus&&(placeMark(e,r),handleCheckWin(r),checkID(e.id),""==currentBoard[fieldY][fieldX]&&(currentBoard[fieldY][fieldX]=r==CROSS_CLASS?"x":"o")),"still runinng"===gameStatus&&""!==gameMode&&(notify(n),handleCheckWin(n))}function placeMark(e,r){e.classList.add(r)}function checkID(e){fieldY=e<3?(fieldX=e,0):e<6?(fieldX=e-3,1):(fieldX=e-6,2)}function swapTurns(){circleTurn=!circleTurn}function setBoardHoverClass(){$board.classList.remove(CROSS_CLASS),$board.classList.remove(CIRCLE_CLASS),circleTurn?$board.classList.add(CIRCLE_CLASS):$board.classList.add(CROSS_CLASS)}function getModeClassForName(e){return"Random"===e?randomMode[randomNumber]:"Easy"===e?"easy":"Medium"===e?"medium":"Hard"===e?"hard":null}function notify(e){switch(currentMode){case"easy":takeAEasyMove(e);break;case"medium":takeAMediumMove(e);break;case"hard":takeAHardMove(e)}}function handleCheckWin(e){checkWin(e)?endGame(!1):isDraw()?endGame(!0):(swapTurns(),setBoardHoverClass()),checkWin(opponentClass)&&(swapTurns(),setBoardHoverClass())}function checkWin(r){return WINNING_COMBINATIONS.some(function(e){return e.every(function(e){return $cellElements[e].classList.contains(r)})})}function isDraw(){return _toConsumableArray($cellElements).every(function(e){return e.classList.contains(CROSS_CLASS)||e.classList.contains(CIRCLE_CLASS)})}function endGame(e){return e?($winningMessageTextElement.innerText="Draw!",gameStatus="finish",$winningMessageElement.classList.add("show"),!1):($winningMessageTextElement.innerText="".concat(circleTurn?"O's":"X's"," Wins!"),gameStatus="finish",$winningMessageElement.classList.add("show"),opponentClass===CROSS_CLASS&&circleTurn?$resultPlayer.textContent++:opponentClass!==CROSS_CLASS||circleTurn?opponentClass!==CIRCLE_CLASS||circleTurn?opponentClass===CIRCLE_CLASS&&circleTurn&&$resultAIorFriend.textContent++:$resultPlayer.textContent++:$resultAIorFriend.textContent++,!0)}function takeAEasyMove(e){var r=[],n=($cellElements.forEach(function(e){e.classList.contains("cross")||e.classList.contains("circle")||r.push(e)}),r[Math.floor(Math.random()*r.length)]);void 0!==n&&(n.classList.add(e),n.removeEventListener("click",handleClick))}function takeAMediumMove(e){var r,n=[];$cellElements.forEach(function(e){e.classList.contains("cross")||e.classList.contains("circle")||n.push(e)}),Boolean(Math.round(Math.random()))?(r=minMax(n.length,!1,!0),console.log("ai")):(r=n[Math.floor(Math.random()*n.length)].id,console.log("przypadkowa")),void 0!==r&&(console.log(r),$cellElements[r].classList.add(e),$cellElements[r].removeEventListener("click",handleClick),checkID(r),""==currentBoard[fieldY][fieldX]&&(currentBoard[fieldY][fieldX]=circleTurn?"o":"x"))}function takeAHardMove(e){var r=[],n=($cellElements.forEach(function(e){e.classList.contains("cross")||e.classList.contains("circle")||r.push(e)}),minMax(r.length,!1,!0));console.log(n),void 0!==n&&(console.log("wbiÅ‚em tu"),$cellElements[n].classList.add(e),$cellElements[n].removeEventListener("click",handleClick),checkID(n),""==currentBoard[fieldY][fieldX]&&(currentBoard[fieldY][fieldX]=circleTurn?"o":"x"))}function minMax(e,r,n){var t=circleTurn?"x":"o",a=circleTurn?"o":"x",o=!!r;if(checkIfSomeoneHasWon())return o?3:1;if(0==e)return 2;for(var s=0,c=[[0,0,0],[0,0,0],[0,0,0]],l=0;l<3;l++)for(var i=0;i<3;i++)""==currentBoard[l][i]&&(currentBoard[l][i]=o?t:a,c[l][i]=minMax(e-1,!r,!1),currentBoard[l][i]="");if(o)for(var s=3,u=0;u<3;u++)for(var d=0;d<3;d++)0!=c[u][d]&&c[u][d]<s&&(s=c[u][d]);else{var m=0,f=0;s=c[0][0];for(var S=0;S<3;S++)for(var C=0;C<3;C++)c[S][C]>s&&(s=c[S][C],m=C,f=S);if(n)return 3*f+m}return s}function checkIfSomeoneHasWon(){for(var e=0;e<3;e++)if(""!=currentBoard[e][0]&&currentBoard[e][0]==currentBoard[e][1]&&currentBoard[e][1]==currentBoard[e][2])return!0;for(var r=0;r<3;r++)if(""!=currentBoard[0][r]&&currentBoard[0][r]==currentBoard[1][r]&&currentBoard[1][r]==currentBoard[2][r])return!0;return""!=currentBoard[0][0]&&currentBoard[0][0]==currentBoard[1][1]&&currentBoard[1][1]==currentBoard[2][2]||""!=currentBoard[2][0]&&currentBoard[2][0]==currentBoard[1][1]&&currentBoard[1][1]==currentBoard[0][2]}document.addEventListener("DOMContentLoaded",game);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
